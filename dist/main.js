/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./main.js":
/*!*****************!*\
  !*** ./main.js ***!
  \*****************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _toy_react_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toy-react.js */ \"./toy-react.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n // Square 组件渲染了一个单独的 <button>\n\nvar Square = /*#__PURE__*/function (_Component) {\n  _inherits(Square, _Component);\n\n  var _super = _createSuper(Square);\n\n  function Square() {\n    _classCallCheck(this, Square);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Square, [{\n    key: \"render\",\n    value: // 添加一个构造函数，用来初始化 state\n    // constructor(props) {\n    //   // 每次你定义其子类的构造函数时，都需要调用 super 方法。因此，在所有含有构造函数的的 React 组件中，构造函数必须以 super(props) 开头。\n    //   super(props);\n    //   this.state = {\n    //     value: null,\n    //   };\n    // }\n    // 父组件引入后，Square组件不需要再保存游戏的 state\n    function render() {\n      var _this = this;\n\n      return (//   <button className=\"square\" onClick={function() {alert('click'); }}>\n        // 为了避免 this 造成的困扰，我们在这里使用箭头函数 来进行事件处理\n        //   <button className=\"square\" onClick={() => alert(\"click\")}>\n        // 次在组件中调用 setState 时，React 都会自动更新其子组件\n        // <button className=\"square\" onClick={() => this.setState({ value: \"X\" })}>\n        // 接收父组件参数\n        _toy_react_js__WEBPACK_IMPORTED_MODULE_0__.ToyReact.createElement(\"button\", {\n          className: \"square\",\n          onClick: function onClick() {\n            return _this.props.onClick();\n          }\n        }, this.props.value)\n      );\n    }\n  }]);\n\n  return Square;\n}(_toy_react_js__WEBPACK_IMPORTED_MODULE_0__.Component); // Board 组件渲染了 9 个方块\n\n\nvar Board = /*#__PURE__*/function (_Component2) {\n  _inherits(Board, _Component2);\n\n  var _super2 = _createSuper(Board);\n\n  function Board() {\n    _classCallCheck(this, Board);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(Board, [{\n    key: \"renderSquare\",\n    value: // 将Board中的数据转移至Game父组件\n    // // 为 Board 组件添加构造函数，将 Board 组件的初始状态设置为长度为 9 的空值数组\n    // constructor(props) {\n    //   super(props);\n    //   this.state = {\n    //     squares: Array(9).fill(null),\n    //     // 将 “X” 默认设置为先手棋\n    //     xIsNext: true,\n    //   };\n    // }\n    // 移至Game组件\n    // 点击事件\n    // handleClick(i) {\n    //   const squares = this.state.squares.slice();\n    //   // 当有玩家胜出时，或者某个 Square 已经被填充时，该函数不做任何处理直接返回\n    //   if (calculateWinner(squares) || squares[i]) return;\n    //   // 根据xIsNext判断\n    //   squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    //   this.setState({\n    //     squares: squares,\n    //     // 翻转xIsNext\n    //     xIsNext: !this.state.xIsNext,\n    //   });\n    // }\n    function renderSquare(i) {\n      var _this2 = this;\n\n      // return <Square />;\n      // 增加参数，修改一下 Square 的点击事件监听函数\n      return _toy_react_js__WEBPACK_IMPORTED_MODULE_0__.ToyReact.createElement(Square // value={this.state.squares[i]}\n      // onClick={() => this.handleClick(i)}\n      // 从 Game 组件中接收 squares 和 onClick 这两个 props。\n      , {\n        value: this.props.squares[i],\n        onClick: function onClick() {\n          return _this2.props.onClick(i);\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // 移到Game组件\n      // // // 状态变化\n      // // const status = \"Next player: \" +  (this.state.xIsNext ? \"X\" : \"O\");\n      // // 计算胜者\n      // const winner = calculateWinner(this.state.squares);\n      // // 状态\n      // let status;\n      // // 判断是否获胜\n      // if (winner) {\n      //   status = '胜者：' + winner;\n      // } else {\n      //   status = \"下一步: \" +  (this.state.xIsNext ? \"X\" : \"O\");\n      // }\n      return _toy_react_js__WEBPACK_IMPORTED_MODULE_0__.ToyReact.createElement(\"div\", null, _toy_react_js__WEBPACK_IMPORTED_MODULE_0__.ToyReact.createElement(\"div\", {\n        className: \"board-row\"\n      }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), _toy_react_js__WEBPACK_IMPORTED_MODULE_0__.ToyReact.createElement(\"div\", {\n        className: \"board-row\"\n      }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), _toy_react_js__WEBPACK_IMPORTED_MODULE_0__.ToyReact.createElement(\"div\", {\n        className: \"board-row\"\n      }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)));\n    }\n  }]);\n\n  return Board;\n}(_toy_react_js__WEBPACK_IMPORTED_MODULE_0__.Component); // Game 组件渲染了含有默认值的一个棋盘\n\n\nvar Game = /*#__PURE__*/function (_Component3) {\n  _inherits(Game, _Component3);\n\n  var _super3 = _createSuper(Game);\n\n  // 为 Game 组件添加构造函数，保存历史步骤列表\n  function Game(props) {\n    var _this3;\n\n    _classCallCheck(this, Game);\n\n    _this3 = _super3.call(this, props);\n    _this3.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      // 步数\n      stepNumber: 0,\n      // 将 “X” 默认设置为先手棋\n      xIsNext: true\n    };\n    return _this3;\n  }\n\n  _createClass(Game, [{\n    key: \"handleClick\",\n    value: // 点击事件\n    function handleClick(i) {\n      // 历史,丢弃stepNumber后的数据\n      var history = this.state.history.slice(0, this.state.stepNumber + 1); // 当前状态\n\n      var current = history[history.length - 1];\n      var squares = current.squares.slice(); // 当有玩家胜出时，或者某个 Square 已经被填充时，该函数不做任何处理直接返回\n\n      if (calculateWinner(squares) || squares[i]) return; // 根据xIsNext判断\n\n      squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n      this.setState({\n        history: history.concat([{\n          squares: squares\n        }]),\n        // squares: squares,\n        // 更新时间步\n        stepNumber: history.length,\n        // 翻转xIsNext\n        xIsNext: !this.state.xIsNext\n      });\n    } // 更新状态 stepNumber\n\n  }, {\n    key: \"jumpTo\",\n    value: function jumpTo(step) {\n      this.setState({\n        stepNumber: step,\n        xIsNext: step % 2 === 0\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      // // 状态变化，从子组件提升到父组件\n      // 历史\n      var history = this.state.history; // 当前状态，将代码从始终根据最后一次移动渲染修改为根据当前 stepNumber 渲染\n\n      var current = history[this.state.stepNumber]; // 计算胜者\n\n      var winner = calculateWinner(current.squares); // 历史步骤映射为代表按钮的 React 元素，然后可以展示出一个按钮的列表，点击这些按钮，可以“跳转”到对应的历史步骤。\n\n      var moves = history.map(function (step, move) {\n        var desc = move ? \"跳转至第\" + move + \"步\" : \"游戏重新开始\";\n        return (// 组件的 key 值并不需要在全局都保证唯一，只需要在当前的同一级元素之前保证唯一即可\n          _toy_react_js__WEBPACK_IMPORTED_MODULE_0__.ToyReact.createElement(\"li\", {\n            key: move\n          }, _toy_react_js__WEBPACK_IMPORTED_MODULE_0__.ToyReact.createElement(\"button\", {\n            onClick: function onClick() {\n              return _this4.jumpTo(move);\n            }\n          }, desc))\n        );\n      }); // 状态\n\n      var status; // 判断是否获胜\n\n      if (winner) {\n        status = \"胜者：\" + winner;\n      } else {\n        status = \"下一步: \" + (this.state.xIsNext ? \"X\" : \"O\");\n      }\n\n      return _toy_react_js__WEBPACK_IMPORTED_MODULE_0__.ToyReact.createElement(\"div\", {\n        className: \"game\"\n      }, _toy_react_js__WEBPACK_IMPORTED_MODULE_0__.ToyReact.createElement(\"div\", {\n        className: \"game-board\"\n      }, _toy_react_js__WEBPACK_IMPORTED_MODULE_0__.ToyReact.createElement(Board // 绑定参数和事件\n      , {\n        squares: current.squares,\n        onClick: function onClick(i) {\n          return _this4.handleClick(i);\n        }\n      })), _toy_react_js__WEBPACK_IMPORTED_MODULE_0__.ToyReact.createElement(\"div\", {\n        className: \"game-info\"\n      }, _toy_react_js__WEBPACK_IMPORTED_MODULE_0__.ToyReact.createElement(\"div\", null, status), _toy_react_js__WEBPACK_IMPORTED_MODULE_0__.ToyReact.createElement(\"ol\", null, moves)));\n    }\n  }]);\n\n  return Game;\n}(_toy_react_js__WEBPACK_IMPORTED_MODULE_0__.Component); // ========================================\n\n\n_toy_react_js__WEBPACK_IMPORTED_MODULE_0__.ToyReact.render(_toy_react_js__WEBPACK_IMPORTED_MODULE_0__.ToyReact.createElement(Game, null), document.getElementById(\"root\")); // let game = <Game/>;\n// console.log(game.vdom);\n// 判断胜者\n\nfunction calculateWinner(squares) {\n  // 获胜的序号\n  var lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (var i = 0; i < lines.length; i++) {\n    var _lines$i = _slicedToArray(lines[i], 3),\n        a = _lines$i[0],\n        b = _lines$i[1],\n        c = _lines$i[2]; // 有人获胜\n\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}\n\n//# sourceURL=webpack://toy_react/./main.js?");

/***/ }),

/***/ "./toy-react.js":
/*!**********************!*\
  !*** ./toy-react.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Component\": () => (/* binding */ Component),\n/* harmony export */   \"ToyReact\": () => (/* binding */ ToyReact)\n/* harmony export */ });\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n// 通过symbol定义方法名称，保证私有性\nvar RENDER_TO_DOM = Symbol(\"rendor to dom\");\nvar Component = /*#__PURE__*/function () {\n  function Component() {\n    _classCallCheck(this, Component);\n\n    // 不需要有什么行为\n    // 取到props\n    this.props = Object.create(null);\n    this.children = []; // 初始化root\n\n    this._root = null; // 初始化range\n\n    this._range = null;\n  } // 把Component的属性存起来\n\n\n  _createClass(Component, [{\n    key: \"setAttribute\",\n    value: function setAttribute(name, value) {\n      this.props[name] = value;\n    } // 添加子元素\n\n  }, {\n    key: \"appendChild\",\n    value: function appendChild(component) {\n      this.children.push(component);\n    }\n  }, {\n    key: \"vdom\",\n    get: function get() {\n      return this.render().vdom;\n    } // 使用[]将Symbol作为函数名\n    // 传入的是range\n\n  }, {\n    key: RENDER_TO_DOM,\n    value: function value(range) {\n      // 保存range和vdom\n      this._range = range; // 由于this.vdom是getter，所以会重新调用组件的render方法，返回新的vdom，实现vdom更新\n\n      this._vdom = this.vdom; // 渲染旧的vdom\n\n      this._vdom[RENDER_TO_DOM](range);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      // 更新为newNode\n      var isSameNode = function isSameNode(oldNode, newNode) {\n        // type不同，则为不同节点\n        if (oldNode.type !== newNode.type) {\n          return false;\n        } // props不同，则为不同节点\n\n\n        for (var key in newNode.props) {\n          // 属性值要相同\n          if (newNode.props[key] !== oldNode.props[key]) {\n            return false;\n          }\n        } // props的长度不相同，节点不相同\n\n\n        if (Object.keys(oldNode.props).length !== Object.keys(newNode.props).length) {\n          return false;\n        } // 文本节点，比对content\n\n\n        if (newNode.type === '#text') {\n          if (newNode.content !== oldNode.content) {\n            return false;\n          }\n        }\n\n        return true;\n      }; // 更新为newNode\n\n\n      var update = function update(oldNode, newNode) {\n        // type,props.children\n        // #text content\n        // 根节点不同，则全部重新渲染\n        if (!isSameNode(oldNode, newNode)) {\n          // 替换oldNode\n          newNode[RENDER_TO_DOM](oldNode._range);\n          return;\n        }\n\n        newNode._range = oldNode._range; // children的处理\n        // 因为children属性是实体dom，所以我们要拿到vchildren\n\n        var newChildren = newNode.vchildren;\n        var oldChildren = oldNode.vchildren;\n\n        if (!newChildren || !newChildren.length) {\n          return;\n        } // 记录oldChildren的尾部位置\n\n\n        var tailRange = oldChildren[oldChildren.length - 1]._range; // 两个数组一起循环，所以不用 for of循环\n\n        for (var i = 0; i < newChildren.length; i++) {\n          var newChild = newChildren[i];\n          var oldChild = oldChildren[i];\n\n          if (i < oldChildren.length) {\n            update(oldChild, newChild);\n          } else {\n            // 如果newChild比oldChild元素多，我们需要在newChild进行节点插入\n            // 创建一个需要插入的range\n            var range = document.createRange();\n            range.setStart(tailRange.endContainer, tailRange.endOffset);\n            range.setEnd(tailRange.endContainer, tailRange.endOffset);\n            newChild[RENDER_TO_DOM](range);\n            tailRange = range;\n          }\n        }\n      }; // 保存新的vdom\n\n\n      var vdom = this.vdom; // 对比vdom\n\n      update(this._vdom, vdom); // 重新赋值\n\n      this._vdom = vdom;\n    } // 定义重绘方法\n    // rerender() {\n    //   // 保存this._range\n    //   let oldRange = this._range;\n    //   // 新创建的range没有宽度，但会改变oldRange的宽度\n    //   let range = document.createRange();\n    //   // 新创建的range在this._range的start处\n    //   range.setStart(oldRange.startContainer, oldRange.startOffset);\n    //   range.setEnd(oldRange.startContainer, oldRange.startOffset);\n    //   this[RENDER_TO_DOM](range);\n    //   // 重设oldRange的start节点，跳过插入的range\n    //   oldRange.setStart(range.endContainer, range.endOffset);\n    //   // 清除oldRange的内容\n    //   oldRange.deleteContents();\n    // }\n    // Component的setState方法\n\n  }, {\n    key: \"setState\",\n    value: function setState(newState) {\n      // state为null时的处理\n      if (this.state === null || _typeof(this.state) !== 'object') {\n        this.state = newState; // this.rerender();\n\n        this.update();\n        return;\n      } // 采用递归的方式访问state\n\n\n      var merge = function merge(oldState, newState) {\n        for (var key in newState) {\n          if (oldState[key] === null || _typeof(oldState[key]) !== 'object') {\n            oldState[key] = newState[key];\n          } else {\n            // 如果oldSate的p属性为对象，那么就递归调用merge，实现深拷贝\n            merge(oldState[key], newState[key]);\n          }\n        }\n      };\n\n      merge(this.state, newState);\n      this.update();\n    }\n  }]);\n\n  return Component;\n}();\n\nvar ElementWrapper = /*#__PURE__*/function (_Component) {\n  _inherits(ElementWrapper, _Component);\n\n  var _super = _createSuper(ElementWrapper);\n\n  function ElementWrapper(type) {\n    var _this;\n\n    _classCallCheck(this, ElementWrapper);\n\n    _this = _super.call(this, type);\n    _this.type = type; // 创建根元素\n    // 删除setAtrribute和appendChild方法之后\n    // this.root = document.createElement(type);\n\n    return _this;\n  } // 基于VDOM操作，删除setAtrribute和appendChild方法\n  // // 配置属性，支持事件绑定\n  // setAttribute(name, value) {\n  //   // 采用正则，判断name是否为on开头\n  //   if (name.match(/^on([\\s\\S]+)/)) {\n  //     // [\\s\\S] 表示全部字符 \\s为非空白，\\S为空白，两个集合互补\n  //     // 由于此处采用match，所以RegExp.$1将拿到匹配的字符，即on之后的部分\n  //     // RegExp.$1.replace(/^[\\s\\S]/, c => c.toLowerCase())\n  //     // 确保事件名小写，将第一个字母转换为小写\n  //     this.root.addEventListener(RegExp.$1.replace(/^[\\s\\S]/, c => c.toLowerCase()), value);\n  //   } else if (name === 'className') { // 配置属性\n  //     this.root.setAttribute('class', value);\n  //   } else {\n  //     this.root.setAttribute(name, value);\n  //   }\n  // }\n  // // 添加子元素\n  // // 添加的是component，所以要取出传入的component的root\n  // appendChild(component) {\n  //   // 在parentElement尾部增加range\n  //   let range = document.createRange();\n  //   // 将range的start节点设置为parentElement，offset为0，说明range将包含parentElement的全部children\n  //   range.setStart(this.root, this.root.childNodes.length);\n  //   // 因为parentElement中会有文本节点和注释节点，所以offset不是parentElement.children.length\n  //   range.setEnd(this.root, this.root.childNodes.length);\n  //   component[RENDER_TO_DOM](range);\n  // }\n\n\n  _createClass(ElementWrapper, [{\n    key: \"vdom\",\n    get: function get() {\n      this.vchildren = this.children.map(function (child) {\n        return child.vdom;\n      });\n      return this; // {\n      //   type: this.type,\n      //   props: this.props,\n      //   // 拿到每个child的<vdom></vdom>m></vdom>m></vdom>m></vdom>m></vdom>m></vdom>m></vdom>m></vdom>m></vdom>m></vdom>m></vdom>m></vdom>m></vdom>\n      //   children: this.children.map(child => child.vdom)\n      // }\n    } // 增加[RENDER_TO_DOM]方法\n\n  }, {\n    key: RENDER_TO_DOM,\n    value: function value(range) {\n      this._range = range; // 通过replaceContent代替初始时range.deleteContents()\n      // 首先从文档中移除 Range 包含的内容。\n      // range.deleteContents();\n      // 创建实体dom，root\n\n      var root = document.createElement(this.type); // props内容抄写，setAttribute逻辑的实现\n\n      for (var name in this.props) {\n        var value = this.props[name]; // 采用正则，判断name是否为on开头\n\n        if (name.match(/^on([\\s\\S]+)/)) {\n          // [\\s\\S] 表示全部字符 \\s为非空白，\\S为空白，两个集合互补\n          // 由于此处采用match，所以RegExp.$1将拿到匹配的字符，即on之后的部分\n          // RegExp.$1.replace(/^[\\s\\S]/, c => c.toLowerCase())\n          // 确保事件名小写，将第一个字母转换为小写\n          root.addEventListener(RegExp.$1.replace(/^[\\s\\S]/, function (c) {\n            return c.toLowerCase();\n          }), value);\n        } else if (name === 'className') {\n          // 配置属性\n          root.setAttribute('class', value);\n        } else {\n          root.setAttribute(name, value);\n        }\n      }\n\n      if (!this.vchildren) this.vchildren = this.children.map(function (child) {\n        return child.vdom;\n      }); // children的处理\n\n      var _iterator = _createForOfIteratorHelper(this.vchildren),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var child = _step.value;\n          // 在parentElement尾部增加range\n          var childRange = document.createRange(); // 将range的start节点设置为parentElement，offset为0，说明range将包含parentElement的全部children\n\n          childRange.setStart(root, root.childNodes.length); // 因为parentElement中会有文本节点和注释节点，所以offset不是parentElement.children.length\n\n          childRange.setEnd(root, root.childNodes.length);\n          child[RENDER_TO_DOM](childRange);\n        } // 完成root的挂载\n        // 再将root插入range，完成渲染\n        // 挂载 root\n        // range.insertNode(root);\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      replaceContent(range, root);\n    }\n  }]);\n\n  return ElementWrapper;\n}(Component); // 文本节点不需要设置属性及添加子元素\n\n\nvar TextWrapper = /*#__PURE__*/function (_Component2) {\n  _inherits(TextWrapper, _Component2);\n\n  var _super2 = _createSuper(TextWrapper);\n\n  function TextWrapper(content) {\n    var _this2;\n\n    _classCallCheck(this, TextWrapper);\n\n    _this2 = _super2.call(this, content);\n    _this2.type = '#text';\n    _this2.content = content;\n    _this2.root = document.createTextNode(content);\n    return _this2;\n  }\n\n  _createClass(TextWrapper, [{\n    key: \"vdom\",\n    get: function get() {\n      return this; // {\n      //   type: \"#text\",\n      //   content: this.content\n      // }\n    } // 增加[RENDER_TO_DOM]方法\n\n  }, {\n    key: RENDER_TO_DOM,\n    value: function value(range) {\n      this._range = range;\n      var root = document.createTextNode(this.content); // 首先从文档中移除 Range 包含的内容。\n      // range.deleteContents();\n      // 再将root插入range，完成渲染\n      // range.insertNode(this.root);\n\n      replaceContent(range, root);\n    }\n  }]);\n\n  return TextWrapper;\n}(Component);\n\nfunction replaceContent(range, node) {\n  // 将node插入range，此时node在range的最前位置\n  range.insertNode(node); // range挪到node之后\n\n  range.setStartAfter(node); // 清空range\n\n  range.deleteContents(); // 重设range的位置\n\n  range.setStartBefore(node);\n  range.setEndAfter(node);\n}\n\nvar ToyReact = /*#__PURE__*/function () {\n  function ToyReact() {\n    _classCallCheck(this, ToyReact);\n  }\n\n  _createClass(ToyReact, null, [{\n    key: \"createElement\",\n    value: function createElement(tagType, attributes) {\n      var element;\n\n      if (typeof tagType === 'string') {\n        // 如果是小写的tagName，则生成ElementWrapper对象\n        element = new ElementWrapper(tagType);\n      } else {\n        // 如果是组件，则生成对应的组件对象\n        element = new tagType();\n      } // 增加属性\n\n\n      for (var name in attributes) {\n        // 调用元素的setAttribute方法\n        element.setAttribute(name, attributes[name]);\n      } // 增加子节点\n      // 扩展运算符将children包装为一个数组\n\n\n      var insertChildren = function insertChildren(children) {\n        var _iterator2 = _createForOfIteratorHelper(children),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var child = _step2.value;\n\n            // 如果child为null，不做任何处理\n            if (child === null) {\n              continue;\n            } // 将child创建为文本节点，如果child是文本节点\n\n\n            if (typeof child === 'string') {\n              child = new TextWrapper(child);\n            } // 当child是数组的时候，即component中的children，需要展开child\n\n\n            if (_typeof(child) === 'object' && child instanceof Array) {\n              // 递归调用\n              insertChildren(child);\n            } else {\n              // 调用元素的appendChild方法\n              element.appendChild(child);\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      };\n\n      for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        children[_key - 2] = arguments[_key];\n      }\n\n      insertChildren(children);\n      return element;\n    }\n  }, {\n    key: \"render\",\n    value: function render(component, parentElement) {\n      // 在parentElement尾部增加range\n      var range = document.createRange(); // 将range的start节点设置为parentElement，offset为0，说明range将包含parentElement的全部children\n\n      range.setStart(parentElement, 0); // 因为parentElement中会有文本节点和注释节点，所以offset不是parentElement.children.length\n\n      range.setEnd(parentElement, parentElement.childNodes.length); // 清空range\n\n      range.deleteContents(); // 调用[RENDER_TO_DOM]方法\n\n      component[RENDER_TO_DOM](range);\n    }\n  }]);\n\n  return ToyReact;\n}();\n\n//# sourceURL=webpack://toy_react/./toy-react.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./main.js");
/******/ 	
/******/ })()
;